#!/usr/bin/env python
# coding: utf-8

# ## Attempting to run Biddy et al. code from README.md
# Must have `samtools` installed in environment to work
# (Installed in `STAR_protocol` conda environment.)

# In[1]:


#!conda install -c bioconda samtools


# 
# (Copying most directly from README)
# 
# First we will download the BAM file generated by the 10x CellRanger pipeline for this sample.
# 
# The link for this BAM file is:
# 
# https://sra-pub-src-1.s3.amazonaws.com/SRR7347033/hf1.d15.possorted_genome_bam.bam.1
# 
# This BAM file contains all of the reads from the Day 15 timepoint.
# 
# This command will download the BAM file into your current working directory. This BAM file is nearly 40 GBs so the download could take some time to complete.
# 
# **NOTE: The `!` symbol at the beginning of the code line indicates the following code will be executed as a shell function**

# In[3]:


#!wget https://sra-pub-src-1.s3.amazonaws.com/SRR7347033/hf1.d15.possorted_genome_bam.bam.1


# ### **NOTE: Do NOT push this big data file to GitHub!**
# Fortunately, the authors generated a `.gitignore` file to help ensure this does not happen. I have moved this file to `/data/QSBSC/Biddy2018` to allow direct access for others.
# 
# Now that we have downloaded the BAM file we can search for any read containing a CellTag motif. First, because the BAM file is binary we need to view the file using a tool such as samtools. We do this by using the samtools view command. The output from this command is then piped into grep. We use grep and a regular expression to search for CellTag containing reads. The reads which contain CellTags are then written to an output file. The CellTag motifs for CellTagMEF, CellTagD3, and CellTagD13 are unique. This allows us to distinguish between CellTags originating from different libraries. The commands below will identify the CellTags for each CellTag version.
# 
# We use the `*.possorted_genome_bam.bam` output file from the 10x CellRanger pipeline, because each read has been tagged with its associated Cell Barcode, UMI, and aligned genes.

# In[4]:


#bash
#MEF
get_ipython().system("/home/darren/miniconda/envs/STAR_protocol/bin/samtools view /data/QSBSC/Biddy2018/hf1.d15.possorted_genome_bam.bam.1 | grep -P 'GGT[ACTG]{8}GAATTC' > v1.celltag.reads.out")

#D3
get_ipython().system("/home/darren/miniconda/envs/STAR_protocol/bin/samtools view /data/QSBSC/Biddy2018/hf1.d15.possorted_genome_bam.bam.1 | grep -P 'GTGATG[ACTG]{8}GAATTC' > v2.celltag.reads.out")

#D13
get_ipython().system("/home/darren/miniconda/envs/STAR_protocol/bin/samtools view /data/QSBSC/Biddy2018/hf1.d15.possorted_genome_bam.bam.1 | grep -P 'TGTACG[ACTG]{8}GAATTC' > v3.celltag.reads.out")


# Move files to `/data/QSBSC/Biddy2018`

# In[5]:


#!mv v* /data/QSBSC/Biddy2018/.


# In[ ]:




